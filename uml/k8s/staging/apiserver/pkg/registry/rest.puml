@startuml
namespace rest {
    interface CategoriesProvider  {
        + Categories() []string

    }
    interface CollectionDeleter  {
        + DeleteCollection(ctx context.Context, deleteValidation ValidateObjectFunc, options *v1.DeleteOptions, listOptions *internalversion.ListOptions) (runtime.Object, error)

    }
    interface Connecter  {
        + Connect(ctx context.Context, id string, options runtime.Object, r Responder) (http.Handler, error)
        + NewConnectOptions() (runtime.Object, bool, string)
        + ConnectMethods() []string

    }
    interface CreateUpdateResetFieldsStrategy  {
    }
    interface Creater  {
        + New() runtime.Object
        + Create(ctx context.Context, obj runtime.Object, createValidation ValidateObjectFunc, options *v1.CreateOptions) (runtime.Object, error)

    }
    interface CreaterUpdater  {
        + Update(ctx context.Context, name string, objInfo UpdatedObjectInfo, createValidation ValidateObjectFunc, updateValidation ValidateObjectUpdateFunc, forceAllowCreate bool, options *v1.UpdateOptions) (runtime.Object, bool, error)

    }
    interface GarbageCollectionDeleteStrategy  {
        + DefaultGarbageCollectionPolicy(ctx context.Context) GarbageCollectionPolicy

    }
    interface Getter  {
        + Get(ctx context.Context, name string, options *v1.GetOptions) (runtime.Object, error)

    }
    interface GetterWithOptions  {
        + Get(ctx context.Context, name string, options runtime.Object) (runtime.Object, error)
        + NewGetOptions() (runtime.Object, bool, string)

    }
    interface GracefulDeleter  {
        + Delete(ctx context.Context, name string, deleteValidation ValidateObjectFunc, options *v1.DeleteOptions) (runtime.Object, bool, error)

    }
    interface GroupVersionAcceptor  {
        + AcceptsGroupVersion(gv schema.GroupVersion) bool

    }
    interface GroupVersionKindProvider  {
        + GroupVersionKind(containingGV schema.GroupVersion) schema.GroupVersionKind

    }
    interface KindProvider  {
        + Kind() string

    }
    interface Lister  {
        + NewList() runtime.Object
        + List(ctx context.Context, options *internalversion.ListOptions) (runtime.Object, error)

    }
    interface MayReturnFullObjectDeleter  {
        + DeleteReturnsDeletedObject() bool

    }
    interface NamedCreater  {
        + New() runtime.Object
        + Create(ctx context.Context, name string, obj runtime.Object, createValidation ValidateObjectFunc, options *v1.CreateOptions) (runtime.Object, error)

    }
    interface NamespaceScopedStrategy  {
        + NamespaceScoped() bool

    }
    interface Patcher  {
    }
    interface RESTCreateStrategy  {
        + NamespaceScoped() bool
        + PrepareForCreate(ctx context.Context, obj runtime.Object) 
        + Validate(ctx context.Context, obj runtime.Object) field.ErrorList
        + WarningsOnCreate(ctx context.Context, obj runtime.Object) []string
        + Canonicalize(obj runtime.Object) 

    }
    interface RESTCreateUpdateStrategy  {
        + AllowCreateOnUpdate() bool
        + PrepareForUpdate(ctx context.Context, obj runtime.Object, old runtime.Object) 
        + ValidateUpdate(ctx context.Context, obj runtime.Object, old runtime.Object) field.ErrorList
        + WarningsOnUpdate(ctx context.Context, obj runtime.Object, old runtime.Object) []string
        + AllowUnconditionalUpdate() bool

    }
    interface RESTDeleteStrategy  {
    }
    interface RESTGracefulDeleteStrategy  {
        + CheckGracefulDelete(ctx context.Context, obj runtime.Object, options *v1.DeleteOptions) bool

    }
    interface RESTUpdateStrategy  {
        + NamespaceScoped() bool
        + AllowCreateOnUpdate() bool
        + PrepareForUpdate(ctx context.Context, obj runtime.Object, old runtime.Object) 
        + ValidateUpdate(ctx context.Context, obj runtime.Object, old runtime.Object) field.ErrorList
        + WarningsOnUpdate(ctx context.Context, obj runtime.Object, old runtime.Object) []string
        + Canonicalize(obj runtime.Object) 
        + AllowUnconditionalUpdate() bool

    }
    interface Redirector  {
        + ResourceLocation(ctx context.Context, id string) (*url.URL, http.RoundTripper, error)

    }
    interface ResetFieldsStrategy  {
        + GetResetFields() <font color=blue>map</font>[fieldpath.APIVersion]*fieldpath.Set

    }
    interface ResourceStreamer  {
        + InputStream(ctx context.Context, apiVersion string, acceptHeader string) (io.ReadCloser, bool, string, error)

    }
    interface Responder  {
        + Object(statusCode int, obj runtime.Object) 
        + Error(err error) 

    }
    interface Scoper  {
        + NamespaceScoped() bool

    }
    interface ShortNamesProvider  {
        + ShortNames() []string

    }
    interface SingularNameProvider  {
        + GetSingularName() string

    }
    interface StandardStorage  {
        + Destroy() 

    }
    interface Storage  {
        + New() runtime.Object
        + Destroy() 

    }
    interface StorageMetadata  {
        + ProducesMIMETypes(verb string) []string
        + ProducesObject(verb string) <font color=blue>interface</font>{}

    }
    interface StorageVersionProvider  {
        + StorageVersion() runtime.GroupVersioner

    }
    interface TableConvertor  {
        + ConvertToTable(ctx context.Context, object runtime.Object, tableOptions runtime.Object) (*v1.Table, error)

    }
    interface UpdateResetFieldsStrategy  {
    }
    interface UpdatedObjectInfo  {
        + Preconditions() *v1.Preconditions
        + UpdatedObject(ctx context.Context, oldObj runtime.Object) (runtime.Object, error)

    }
    interface Updater  {
        + New() runtime.Object
        + Update(ctx context.Context, name string, objInfo UpdatedObjectInfo, createValidation ValidateObjectFunc, updateValidation ValidateObjectUpdateFunc, forceAllowCreate bool, options *v1.UpdateOptions) (runtime.Object, bool, error)

    }
    interface Watcher  {
        + Watch(ctx context.Context, options *internalversion.ListOptions) (watch.Interface, error)

    }
    class defaultTableConvertor << (S,Aquamarine) >> {
        - defaultQualifiedResource schema.GroupResource

        + ConvertToTable(ctx context.Context, object runtime.Object, tableOptions runtime.Object) (*v1.Table, error)

    }
    class defaultUpdatedObjectInfo << (S,Aquamarine) >> {
        - obj runtime.Object
        - transformers []TransformFunc

        + Preconditions() *v1.Preconditions
        + UpdatedObject(ctx context.Context, oldObj runtime.Object) (runtime.Object, error)

    }
    class errNotAcceptable << (S,Aquamarine) >> {
        - resource schema.GroupResource

        + Error() string
        + Status() v1.Status

    }
    class rest.GarbageCollectionPolicy << (T, #FF7700) >>  {
    }
    class rest.TransformFunc << (T, #FF7700) >>  {
    }
    class rest.ValidateObjectFunc << (T, #FF7700) >>  {
    }
    class rest.ValidateObjectUpdateFunc << (T, #FF7700) >>  {
    }
    class wrappedUpdatedObjectInfo << (S,Aquamarine) >> {
        - objInfo UpdatedObjectInfo
        - transformers []TransformFunc

        + Preconditions() *v1.Preconditions
        + UpdatedObject(ctx context.Context, oldObj runtime.Object) (runtime.Object, error)

    }
    class "<font color=blue>func</font>(context.Context, runtime.Object) error" as fontcolorbluefuncfontcontextContextruntimeObjecterror {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
    class "<font color=blue>func</font>(context.Context, runtime.Object, runtime.Object) error" as fontcolorbluefuncfontcontextContextruntimeObjectruntimeObjecterror {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
    class "<font color=blue>func</font>(context.Context, runtime.Object, runtime.Object) (runtime.Object, error)" as fontcolorbluefuncfontcontextContextruntimeObjectruntimeObjectruntimeObjecterror {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}
"rest.RESTCreateUpdateStrategy" *-- "rest.CreateUpdateResetFieldsStrategy"
"rest.ResetFieldsStrategy" *-- "rest.CreateUpdateResetFieldsStrategy"
"rest.Creater" *-- "rest.CreaterUpdater"
"rest.TableConvertor" *-- "rest.Lister"
"rest.Getter" *-- "rest.Patcher"
"rest.Updater" *-- "rest.Patcher"
"rest.RESTCreateStrategy" *-- "rest.RESTCreateUpdateStrategy"
"rest.CollectionDeleter" *-- "rest.StandardStorage"
"rest.CreaterUpdater" *-- "rest.StandardStorage"
"rest.Getter" *-- "rest.StandardStorage"
"rest.GracefulDeleter" *-- "rest.StandardStorage"
"rest.Lister" *-- "rest.StandardStorage"
"rest.Watcher" *-- "rest.StandardStorage"
"rest.RESTUpdateStrategy" *-- "rest.UpdateResetFieldsStrategy"
"rest.ResetFieldsStrategy" *-- "rest.UpdateResetFieldsStrategy"

"rest.TableConvertor" <|-- "rest.defaultTableConvertor"
"rest.UpdatedObjectInfo" <|-- "rest.defaultUpdatedObjectInfo"
"rest.UpdatedObjectInfo" <|-- "rest.wrappedUpdatedObjectInfo"

hide methods
@enduml
