@startuml
namespace runtime {
    interface CacheableObject  {
        + CacheEncode(id Identifier, encode <font color=blue>func</font>(Object, io.Writer) error, w io.Writer) error
        + GetObject() Object

    }
    interface ClientNegotiator  {
        + Encoder(contentType string, params <font color=blue>map</font>[string]string) (Encoder, error)
        + Decoder(contentType string, params <font color=blue>map</font>[string]string) (Decoder, error)
        + StreamDecoder(contentType string, params <font color=blue>map</font>[string]string) (Decoder, Serializer, Framer, error)

    }
    interface Decoder  {
        + Decode(data []byte, defaults *schema.GroupVersionKind, into Object) (Object, *schema.GroupVersionKind, error)

    }
    interface Encoder  {
        + Encode(obj Object, w io.Writer) error
        + Identifier() Identifier

    }
    interface EncoderWithAllocator  {
        + EncodeWithAllocator(obj Object, w io.Writer, memAlloc MemoryAllocator) error

    }
    interface EquivalentResourceMapper  {
        + EquivalentResourcesFor(resource schema.GroupVersionResource, subresource string) []schema.GroupVersionResource
        + KindFor(resource schema.GroupVersionResource, subresource string) schema.GroupVersionKind

    }
    interface EquivalentResourceRegistry  {
        + RegisterKindFor(resource schema.GroupVersionResource, subresource string, kind schema.GroupVersionKind) 

    }
    interface Framer  {
        + NewFrameReader(r io.ReadCloser) io.ReadCloser
        + NewFrameWriter(w io.Writer) io.Writer

    }
    interface GroupVersioner  {
        + KindForGroupVersionKinds(kinds []schema.GroupVersionKind) (schema.GroupVersionKind, bool)
        + Identifier() string

    }
    interface MemoryAllocator  {
        + Allocate(n uint64) []byte

    }
    interface Namer  {
        + Name(obj Object) (string, error)
        + Namespace(obj Object) (string, error)

    }
    interface NegotiatedSerializer  {
        + SupportedMediaTypes() []SerializerInfo
        + EncoderForVersion(serializer Encoder, gv GroupVersioner) Encoder
        + DecoderToVersion(serializer Decoder, gv GroupVersioner) Decoder

    }
    interface NestedObjectDecoder  {
        + DecodeNestedObjects(d Decoder) error

    }
    interface NestedObjectEncoder  {
        + EncodeNestedObjects(e Encoder) error

    }
    interface Object  {
        + GetObjectKind() schema.ObjectKind
        + DeepCopyObject() Object

    }
    interface ObjectConvertor  {
        + Convert(in <font color=blue>interface</font>{}, out <font color=blue>interface</font>{}, context <font color=blue>interface</font>{}) error
        + ConvertToVersion(in Object, gv GroupVersioner) (Object, error)
        + ConvertFieldLabel(gvk schema.GroupVersionKind, label string, value string) (string, string, error)

    }
    interface ObjectCreater  {
        + New(kind schema.GroupVersionKind) (Object, error)

    }
    interface ObjectDefaulter  {
        + Default(in Object) 

    }
    interface ObjectTyper  {
        + ObjectKinds( Object) ([]schema.GroupVersionKind, bool, error)
        + Recognizes(gvk schema.GroupVersionKind) bool

    }
    interface ObjectVersioner  {
        + ConvertToVersion(in Object, gv GroupVersioner) (Object, error)

    }
    interface ParameterCodec  {
        + DecodeParameters(parameters url.Values, from schema.GroupVersion, into Object) error
        + EncodeParameters(obj Object, to schema.GroupVersion) (url.Values, error)

    }
    interface ResourceVersioner  {
        + SetResourceVersion(obj Object, version string) error
        + ResourceVersion(obj Object) (string, error)

    }
    interface Serializer  {
    }
    class SerializerInfo << (S,Aquamarine) >> {
        + MediaType string
        + MediaTypeType string
        + MediaTypeSubType string
        + EncodesAsText bool
        + Serializer Serializer
        + PrettySerializer Serializer
        + StrictSerializer Serializer
        + StreamSerializer *StreamSerializerInfo

    }
    interface StorageSerializer  {
        + SupportedMediaTypes() []SerializerInfo
        + UniversalDeserializer() Decoder
        + EncoderForVersion(serializer Encoder, gv GroupVersioner) Encoder
        + DecoderToVersion(serializer Decoder, gv GroupVersioner) Decoder

    }
    class StreamSerializerInfo << (S,Aquamarine) >> {
        + EncodesAsText bool

    }
    interface Unstructured  {
        + NewEmptyInstance() Unstructured
        + UnstructuredContent() <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        + SetUnstructuredContent( <font color=blue>map</font>[string]<font color=blue>interface</font>{}) 
        + IsList() bool
        + EachListItem( <font color=blue>func</font>(Object) error) error

    }
    class runtime.Codec << (T, #FF7700) >>  {
    }
    class runtime.Identifier << (T, #FF7700) >>  {
    }
}
"runtime.Encoder" *-- "runtime.EncoderWithAllocator"
"runtime.EquivalentResourceMapper" *-- "runtime.EquivalentResourceRegistry"
"runtime.Decoder" *-- "runtime.Serializer"
"runtime.Encoder" *-- "runtime.Serializer"
"runtime.Framer" *-- "runtime.StreamSerializerInfo"
"runtime.Serializer" *-- "runtime.StreamSerializerInfo"
"runtime.Object" *-- "runtime.Unstructured"


namespace serializer {
    class CodecFactory << (S,Aquamarine) >> {
        - scheme *runtime.Scheme
        - universal runtime.Decoder
        - accepts []runtime.SerializerInfo
        - legacySerializer runtime.Serializer

        + WithoutConversion() runtime.NegotiatedSerializer
        + SupportedMediaTypes() []runtime.SerializerInfo
        + LegacyCodec(version ...schema.GroupVersion) runtime.Codec
        + UniversalDeserializer() runtime.Decoder
        + UniversalDecoder(versions ...schema.GroupVersion) runtime.Decoder
        + CodecForVersions(encoder runtime.Encoder, decoder runtime.Decoder, encode runtime.GroupVersioner, decode runtime.GroupVersioner) runtime.Codec
        + DecoderToVersion(decoder runtime.Decoder, gv runtime.GroupVersioner) runtime.Decoder
        + EncoderForVersion(encoder runtime.Encoder, gv runtime.GroupVersioner) runtime.Encoder

    }
    class CodecFactoryOptions << (S,Aquamarine) >> {
        + Strict bool
        + Pretty bool

    }
    class WithoutConversionCodecFactory << (S,Aquamarine) >> {
        + EncoderForVersion(serializer runtime.Encoder, version runtime.GroupVersioner) runtime.Encoder
        + DecoderToVersion(serializer runtime.Decoder, _ runtime.GroupVersioner) runtime.Decoder

    }
    class serializer.CodecFactoryOptionsMutator << (T, #FF7700) >>  {
    }
    class serializerType << (S,Aquamarine) >> {
        + AcceptContentTypes []string
        + ContentType string
        + FileExtensions []string
        + EncodesAsText bool
        + Serializer runtime.Serializer
        + PrettySerializer runtime.Serializer
        + StrictSerializer runtime.Serializer
        + AcceptStreamContentTypes []string
        + StreamContentType string
        + Framer runtime.Framer
        + StreamSerializer runtime.Serializer

    }
}
"serializer.CodecFactory" *-- "serializer.WithoutConversionCodecFactory"

"runtime.NegotiatedSerializer" <|-- "serializer.CodecFactory"
"runtime.StorageSerializer" <|-- "serializer.CodecFactory"

@enduml
