@startuml
namespace codec {
    interface CacheableObject  {
        + CacheEncode(id Identifier, encode <font color=blue>func</font>(Object, io.Writer) error, w io.Writer) error
        + GetObject() Object

    }
    interface ClientNegotiator  {
        + Encoder(contentType string, params <font color=blue>map</font>[string]string) (Encoder, error)
        + Decoder(contentType string, params <font color=blue>map</font>[string]string) (Decoder, error)
        + StreamDecoder(contentType string, params <font color=blue>map</font>[string]string) (Decoder, Serializer, Framer, error)

    }
    interface Decoder  {
        + Decode(data []byte, defaults *schema.GroupVersionKind, into Object) (Object, *schema.GroupVersionKind, error)

    }
    interface Encoder  {
        + Encode(obj Object, w io.Writer) error
        + Identifier() Identifier

    }
    interface EncoderWithAllocator  {
        + EncodeWithAllocator(obj Object, w io.Writer, memAlloc MemoryAllocator) error

    }
    interface EquivalentResourceMapper  {
        + EquivalentResourcesFor(resource schema.GroupVersionResource, subresource string) []schema.GroupVersionResource
        + KindFor(resource schema.GroupVersionResource, subresource string) schema.GroupVersionKind

    }
    interface EquivalentResourceRegistry  {
        + RegisterKindFor(resource schema.GroupVersionResource, subresource string, kind schema.GroupVersionKind) 

    }
    interface Framer  {
        + NewFrameReader(r io.ReadCloser) io.ReadCloser
        + NewFrameWriter(w io.Writer) io.Writer

    }
    interface GroupVersioner  {
        + KindForGroupVersionKinds(kinds []schema.GroupVersionKind) (schema.GroupVersionKind, bool)
        + Identifier() string

    }
    interface MemoryAllocator  {
        + Allocate(n uint64) []byte

    }
    interface Namer  {
        + Name(obj Object) (string, error)
        + Namespace(obj Object) (string, error)

    }
    interface NegotiatedSerializer  {
        + SupportedMediaTypes() []SerializerInfo
        + EncoderForVersion(serializer Encoder, gv GroupVersioner) Encoder
        + DecoderToVersion(serializer Decoder, gv GroupVersioner) Decoder

    }
    interface NestedObjectDecoder  {
        + DecodeNestedObjects(d Decoder) error

    }
    interface NestedObjectEncoder  {
        + EncodeNestedObjects(e Encoder) error

    }
    interface Object  {
        + GetObjectKind() schema.ObjectKind
        + DeepCopyObject() Object

    }
    interface ObjectConvertor  {
        + Convert(in <font color=blue>interface</font>{}, out <font color=blue>interface</font>{}, context <font color=blue>interface</font>{}) error
        + ConvertToVersion(in Object, gv GroupVersioner) (Object, error)
        + ConvertFieldLabel(gvk schema.GroupVersionKind, label string, value string) (string, string, error)

    }
    interface ObjectCreater  {
        + New(kind schema.GroupVersionKind) (Object, error)

    }
    interface ObjectDefaulter  {
        + Default(in Object) 

    }
    interface ObjectTyper  {
        + ObjectKinds( Object) ([]schema.GroupVersionKind, bool, error)
        + Recognizes(gvk schema.GroupVersionKind) bool

    }
    interface ObjectVersioner  {
        + ConvertToVersion(in Object, gv GroupVersioner) (Object, error)

    }
    interface ParameterCodec  {
        + DecodeParameters(parameters url.Values, from schema.GroupVersion, into Object) error
        + EncodeParameters(obj Object, to schema.GroupVersion) (url.Values, error)

    }
    interface ResourceVersioner  {
        + SetResourceVersion(obj Object, version string) error
        + ResourceVersion(obj Object) (string, error)

    }
    interface Serializer  {
    }
    class SerializerInfo << (S,Aquamarine) >> {
        + MediaType string
        + MediaTypeType string
        + MediaTypeSubType string
        + EncodesAsText bool
        + Serializer Serializer
        + PrettySerializer Serializer
        + StrictSerializer Serializer
        + StreamSerializer *StreamSerializerInfo

    }
    interface StorageSerializer  {
        + SupportedMediaTypes() []SerializerInfo
        + UniversalDeserializer() Decoder
        + EncoderForVersion(serializer Encoder, gv GroupVersioner) Encoder
        + DecoderToVersion(serializer Decoder, gv GroupVersioner) Decoder

    }
    class StreamSerializerInfo << (S,Aquamarine) >> {
        + EncodesAsText bool

    }
    interface Unstructured  {
        + NewEmptyInstance() Unstructured
        + UnstructuredContent() <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        + SetUnstructuredContent( <font color=blue>map</font>[string]<font color=blue>interface</font>{}) 
        + IsList() bool
        + EachListItem( <font color=blue>func</font>(Object) error) error

    }
    class codec.Codec << (T, #FF7700) >>  {
    }
    class codec.Identifier << (T, #FF7700) >>  {
    }
}
"codec.Encoder" *-- "codec.EncoderWithAllocator"
"codec.EquivalentResourceMapper" *-- "codec.EquivalentResourceRegistry"
"codec.Decoder" *-- "codec.Serializer"
"codec.Encoder" *-- "codec.Serializer"
"codec.Framer" *-- "codec.StreamSerializerInfo"
"codec.Serializer" *-- "codec.StreamSerializerInfo"
"codec.Object" *-- "codec.Unstructured"


namespace codec {
    class CodecFactory << (S,Aquamarine) >> {
        - scheme *codec.Scheme
        - universal codec.Decoder
        - accepts []codec.SerializerInfo
        - legacySerializer codec.Serializer

        + WithoutConversion() codec.NegotiatedSerializer
        + SupportedMediaTypes() []codec.SerializerInfo
        + LegacyCodec(version ...schema.GroupVersion) codec.Codec
        + UniversalDeserializer() codec.Decoder
        + UniversalDecoder(versions ...schema.GroupVersion) codec.Decoder
        + CodecForVersions(encoder codec.Encoder, decoder codec.Decoder, encode codec.GroupVersioner, decode codec.GroupVersioner) codec.Codec
        + DecoderToVersion(decoder codec.Decoder, gv codec.GroupVersioner) codec.Decoder
        + EncoderForVersion(encoder codec.Encoder, gv codec.GroupVersioner) codec.Encoder

    }
    class CodecFactoryOptions << (S,Aquamarine) >> {
        + Strict bool
        + Pretty bool

    }
    class WithoutConversionCodecFactory << (S,Aquamarine) >> {
        + EncoderForVersion(serializer codec.Encoder, version codec.GroupVersioner) codec.Encoder
        + DecoderToVersion(serializer codec.Decoder, _ codec.GroupVersioner) codec.Decoder

    }
    class codec.CodecFactoryOptionsMutator << (T, #FF7700) >>  {
    }
    class serializerType << (S,Aquamarine) >> {
        + AcceptContentTypes []string
        + ContentType string
        + FileExtensions []string
        + EncodesAsText bool
        + Serializer codec.Serializer
        + PrettySerializer codec.Serializer
        + StrictSerializer codec.Serializer
        + AcceptStreamContentTypes []string
        + StreamContentType string
        + Framer codec.Framer
        + StreamSerializer codec.Serializer

    }
}
"codec.CodecFactory" *-- "codec.WithoutConversionCodecFactory"

"codec.NegotiatedSerializer" <|-- "codec.CodecFactory"
"codec.StorageSerializer" <|-- "codec.CodecFactory"

namespace codec {
    class codec << (S,Aquamarine) >> {
        - encoder codec.Encoder
        - decoder codec.Decoder
        - convertor codec.ObjectConvertor
        - creater codec.ObjectCreater
        - typer codec.ObjectTyper
        - defaulter codec.ObjectDefaulter
        - encodeVersion codec.GroupVersioner
        - decodeVersion codec.GroupVersioner
        - identifier codec.Identifier
        - originalSchemeName string

        - encode(obj codec.Object, w io.Writer, memAlloc codec.MemoryAllocator) error
        - doEncode(obj codec.Object, w io.Writer, memAlloc codec.MemoryAllocator) error

        + Decode(data []byte, defaultGVK *schema.GroupVersionKind, into codec.Object) (codec.Object, *schema.GroupVersionKind, error)
        + EncodeWithAllocator(obj codec.Object, w io.Writer, memAlloc codec.MemoryAllocator) error
        + Encode(obj codec.Object, w io.Writer) error
        + Identifier() codec.Identifier

    }
    class codecIdentifier << (S,Aquamarine) >> {
        + EncodeGV string
        + Encoder string
        + Name string

    }
}

"codec.Decoder" <|-- "codec.codec"
"codec.Encoder" <|-- "codec.codec"
"codec.EncoderWithAllocator" <|-- "codec.codec"

"__builtin__.string" #.. "codec.Identifier"
"codec.Serializer" #.. "codec.Codec"
"codec.<font color=blue>func</font>(*CodecFactoryOptions) " #.. "codec.CodecFactoryOptionsMutator"
@enduml
